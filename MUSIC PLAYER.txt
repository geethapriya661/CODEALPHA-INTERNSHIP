HTML:


<!DOCTYPE html>
<html>
<head>
	<title>Music Player</title>
	<link rel="stylesheet" href="stylem.css">
</head>
<body>
	<div class="music-player">
		<div class="player-controls">
			<button id="play-pause-button">Play</button>
			<button id="stop-button">Stop</button>
			<div id="seek-bar"></div>
			<div id="volume-control">
				<button id="mute-button">Mute</button>
				<input type="range" id="volume-slider" min="0" max="1" step="0.1" value="0.5">
			</div>
		</div>
		<audio id="audio-player" src="music.mp3"></audio>
	</div>

	<script src="scriptm.js"></script>
</body>
</html>


CSS (in stylem.css file):


.music-player {
	width: 300px;
	margin: 50px auto;
	background-color: #f0f0f0;
	padding: 20px;
	border: 1px solid #ccc;
	border-radius: 10px;
	box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

.player-controls {
	display: flex;
	flex-direction: column;
	align-items: center;
}

#seek-bar {
	width: 100%;
	height: 10px;
	background-color: #ccc;
	border-radius: 5px;
	margin: 10px 0;
}

#volume-control {
	display: flex;
	align-items: center;
	margin-top: 10px;
}

#volume-slider {
	width: 100px;
	margin-left: 10px;
}


JavaScript (in scriptm.js file):


const audioPlayer = document.getElementById('audio-player');
const playPauseButton = document.getElementById('play-pause-button');
const stopButton = document.getElementById('stop-button');
const seekBar = document.getElementById('seek-bar');
const muteButton = document.getElementById('mute-button');
const volumeSlider = document.getElementById('volume-slider');

let isPlaying = false;

playPauseButton.addEventListener('click', () => {
	if (!isPlaying) {
		audioPlayer.play();
		isPlaying = true;
		playPauseButton.textContent = 'Pause';
	} else {
		audioPlayer.pause();
		isPlaying = false;
		playPauseButton.textContent = 'Play';
	}
});

stopButton.addEventListener('click', () => {
	audioPlayer.pause();
	audioPlayer.currentTime = 0;
	isPlaying = false;
	playPauseButton.textContent = 'Play';
});

seekBar.addEventListener('click', (e) => {
	const seekBarWidth = seekBar.offsetWidth;
	const clickPosition = e.offsetX;
	const audioDuration = audioPlayer.duration;
	audioPlayer.currentTime = (clickPosition / seekBarWidth) * audioDuration;
});

muteButton.addEventListener('click', () => {
	if (audioPlayer.muted) {
		audioPlayer.muted = false;
		muteButton.textContent = 'Mute';
	} else {
		audioPlayer.muted = true;
		muteButton.textContent = 'Unmute';
	}
});

volumeSlider.addEventListener('input', () => {
	audioPlayer.volume = volumeSlider.value;
});